# Define colors for faces
colors = {"U": "W", "D": "Y", "L": "O", "R": "R", "F": "G", "B": "B"}

def solved_cube():
    return {face: [[colors[face]] * 3 for _ in range(3)] for face in "UDLRFB"}

def rotate_face_cw(face):
    return [list(row)[::-1] for row in zip(*face)]

def rotate_face_ccw(face):
    return [list(row) for row in zip(*face)][::-1]

def move_U(cube):
    cube = copy.deepcopy(cube)
    cube["U"] = rotate_face_cw(cube["U"])
    F, R, B, L = cube["F"][0][:], cube["R"][0][:], cube["B"][0][:], cube["L"][0][:]
    cube["F"][0], cube["R"][0], cube["B"][0], cube["L"][0] = R, B, L, F
    return cube

def move_U_prime(cube):
    cube = copy.deepcopy(cube)
    cube["U"] = rotate_face_ccw(cube["U"])
    F, R, B, L = cube["F"][0][:], cube["R"][0][:], cube["B"][0][:], cube["L"][0][:]
    cube["F"][0], cube["R"][0], cube["B"][0], cube["L"][0] = L, F, R, B
    return cube

def move_D(cube):
    cube = copy.deepcopy(cube)
    cube["D"] = rotate_face_cw(cube["D"])
    F, R, B, L = cube["F"][2][:], cube["R"][2][:], cube["B"][2][:], cube["L"][2][:]
    cube["F"][2], cube["R"][2], cube["B"][2], cube["L"][2] = L, F, R, B
    return cube

def move_D_prime(cube):
    cube = copy.deepcopy(cube)
    cube["D"] = rotate_face_ccw(cube["D"])
    F, R, B, L = cube["F"][2][:], cube["R"][2][:], cube["B"][2][:], cube["L"][2][:]
    cube["F"][2], cube["R"][2], cube["B"][2], cube["L"][2] = R, B, L, F
    return cube

def move_L(cube):
    cube = copy.deepcopy(cube)
    cube["L"] = rotate_face_cw(cube["L"])
    U_left = [cube["U"][i][0] for i in range(3)]
    F_left = [cube["F"][i][0] for i in range(3)]
    D_left = [cube["D"][i][0] for i in range(3)]
    B_right = [cube["B"][2-i][2] for i in range(3)]
    for i in range(3):
        cube["U"][i][0] = B_right[i]
        cube["F"][i][0] = U_left[i]
        cube["D"][i][0] = F_left[i]
        cube["B"][2-i][2] = D_left[i]
    return cube

def move_L_prime(cube):
    cube = copy.deepcopy(cube)
    cube["L"] = rotate_face_ccw(cube["L"])
    U_left = [cube["U"][i][0] for i in range(3)]
    F_left = [cube["F"][i][0] for i in range(3)]
    D_left = [cube["D"][i][0] for i in range(3)]
    B_right = [cube["B"][2-i][2] for i in range(3)]
    for i in range(3):
        cube["U"][i][0] = F_left[i]
        cube["F"][i][0] = D_left[i]
        cube["D"][i][0] = B_right[i]
        cube["B"][2-i][2] = U_left[i]
    return cube

def move_R(cube):
    cube = copy.deepcopy(cube)
    cube["R"] = rotate_face_cw(cube["R"])
    U_right = [cube["U"][i][2] for i in range(3)]
    F_right = [cube["F"][i][2] for i in range(3)]
    D_right = [cube["D"][i][2] for i in range(3)]
    B_left = [cube["B"][2-i][0] for i in range(3)]
    for i in range(3):
        cube["U"][i][2] = F_right[i]
        cube["F"][i][2] = D_right[i]
        cube["D"][i][2] = B_left[i]
        cube["B"][2-i][0] = U_right[i]
    return cube

def move_R_prime(cube):
    cube = copy.deepcopy(cube)
    cube["R"] = rotate_face_ccw(cube["R"])
    U_right = [cube["U"][i][2] for i in range(3)]
    F_right = [cube["F"][i][2] for i in range(3)]
    D_right = [cube["D"][i][2] for i in range(3)]
    B_left = [cube["B"][2-i][0] for i in range(3)]
    for i in range(3):
        cube["U"][i][2] = B_left[i]
        cube["F"][i][2] = U_right[i]
        cube["D"][i][2] = F_right[i]
        cube["B"][2-i][0] = D_right[i]
    return cube

def move_F(cube):
    cube = copy.deepcopy(cube)
    cube["F"] = rotate_face_cw(cube["F"])
    U_bottom = cube["U"][2][:]
    R_left = [cube["R"][i][0] for i in range(3)]
    D_top = cube["D"][0][:]
    L_right = [cube["L"][2-i][2] for i in range(3)]
    cube["U"][2] = [L_right[i] for i in range(3)]
    for i in range(3):
        cube["R"][i][0] = U_bottom[i]
    cube["D"][0] = [R_left[i] for i in range(3)]
    for i in range(3):
        cube["L"][2-i][2] = D_top[i]
    return cube

def move_F_prime(cube):
    cube = copy.deepcopy(cube)
    cube["F"] = rotate_face_ccw(cube["F"])
    U_bottom = cube["U"][2][:]
    R_left = [cube["R"][i][0] for i in range(3)]
    D_top = cube["D"][0][:]
    L_right = [cube["L"][2-i][2] for i in range(3)]
    cube["U"][2] = [R_left[i] for i in range(3)]
    for i in range(3):
        cube["R"][i][0] = D_top[i]
    cube["D"][0] = [L_right[i] for i in range(3)]
    for i in range(3):
        cube["L"][2-i][2] = U_bottom[i]
    return cube

def move_B(cube):
    cube = copy.deepcopy(cube)
    cube["B"] = rotate_face_cw(cube["B"])
    U_top = cube["U"][0][:]
    R_right = [cube["R"][i][2] for i in range(3)]
    D_bottom = cube["D"][2][:]
    L_left = [cube["L"][2-i][0] for i in range(3)]
    cube["U"][0] = [R_right[i] for i in range(3)]
    for i in range(3):
        cube["R"][i][2] = D_bottom[i]
    cube["D"][2] = [L_left[i] for i in range(3)]
    for i in range(3):
        cube["L"][2-i][0] = U_top[i]
    return cube

def move_B_prime(cube):
    cube = copy.deepcopy(cube)
    cube["B"] = rotate_face_ccw(cube["B"])
    U_top = cube["U"][0][:]
    R_right = [cube["R"][i][2] for i in range(3)]
    D_bottom = cube["D"][2][:]
    L_left = [cube["L"][2-i][0] for i in range(3)]
    cube["U"][0] = [L_left[i] for i in range(3)]
    for i in range(3):
        cube["R"][i][2] = U_top[i]
    cube["D"][2] = [R_right[i] for i in range(3)]
    for i in range(3):
        cube["L"][2-i][0] = D_bottom[i]
    return cube

# Example scramble function
def scramble(cube, moves):
    move_map = {
        "U": move_U, "U'": move_U_prime,
        "D": move_D, "D'": move_D_prime,
        "L": move_L, "L'": move_L_prime,
        "R": move_R, "R'": move_R_prime,
        "F": move_F, "F'": move_F_prime,
        "B": move_B, "B'": move_B_prime,
    }
    for m in moves:
        if m in move_map:
            cube = move_map[m](cube)
    return cube

if __name__ == "__main__":
    cube = solved_cube()
    scramble_moves = ["U", "R", "F", "L'", "D'", "B'"]
    cube = scramble(cube, scramble_moves)
    print("Scrambled cube:", cube)
